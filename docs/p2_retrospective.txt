1. How many extra days did you use for the project?

I used up an entire extra week (if we are only counting days dedicated to this project).

2. Given the same goals, how would you complete the project differently if you didn’t
have any restrictions imposed by the instructor? This could involve using a particular
library, programming language, etc. Be sure to provide sufficient detail to justify your
response.

Maybe some sort of timeout helper that can help manage the different sleeps and checks
that are happening on the controller, it was a bit difficult figuring out these constants.
And I would imagine that any cluster management API would be extremely helpful here too.
Since I made use of a lot of goroutines, I don't think I would want to use another
language than go, I have become quite the fan. 

3. Let’s imagine that your next project was to improve and extend P1. What are the 
features/functionality you would add, use cases you would support, etc? Are there
any weaknesses in your current implementation that you would like to improve upon?
This should include at least three areas you would improve/extend.

I would like to improve the storage speed. For an 18GB file it took about 10 minutes
to store and around 3 minutes to retrieve. Which seems odd, but I know a good amount
of time is spent doing the chunking on the client side, but not enough to justify how
long it actually takes to store the file. I would like to maybe make this more parallel,
or even find a way to reduce the overall locking.

There are a few known bugs in this program that I'd like to fix. For example, when my
storage node asks for a replica, it only asks once. But if the replica it receives is
corrupt, it just says that it did not  receive a valid replica. This obviously doesn't
make use of the fact that we have a total of 3 copies. I tried to loop through and send
in lists of checked nodes, but that ended up getting weird with an infinite loop that I
could not figure out how to get out of. So I would like to figure out a solution for
this particular case.

A feature that I would like to add is a cleanup job for the storage nodes. Currently,
the program does not actually delete files from the storage nodes when the client asks,
the controller simply removes all info of the file from its internal maps. This is fine
because it will never be able to grab the file, but if space is limited, it would be nice
to have the storage nodes every now and then go through their files and delete non indexed
files to save up space.

4. Give a rough estimate of how long you spent completing this assignment. Additionally,
what part of the assignment took the most time?

I would say about 2 weeks of non intensive work and then 1 week of very intense hours. I
think a good portion of my time was actually spent on the design of this project. And even
though I focused on the design from the beginning and made all my decisions based on how I
would implement fault tolerance, I still had to change my design at least a few times at
every new feature, especially the different types of messages between my nodes and client
and cluster. So I would say the fault tolerance took the most time because even though I
didn't work on it until the end, I was considering it at every step and trying to make
every decision based on what I would need for the fault tolerance. An annoying amount of
time was spent on file permission errors ._.

5. What did you learn from completing this project? Is there anything you would change
about the project?

Up until now, it has been pretty easy for me to come up with a design in the beginning
that sticks. And also coming up with smaller functions that can be reused throughout. But
I found that incredibly difficult to do in this project. Every feature or action that I
found could have similar steps between the different parts of this project were just
different enough that I had a hard time figuring out how to generalize these steps into
small functions like I normally am able to do. I think that is what hurt me the most, and
I definitely want to go back and refactor a lot of this code to be less crazy looking.
Additionally, I know that there must be a better way to group up and reuse the different
message types in my protobufs. But for my own sanity, I just created them as I went
because I was scared of more bugs.
